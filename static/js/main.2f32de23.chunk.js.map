{"version":3,"sources":["assets/white-amazon-logo.png","assets/gov_of_canada.png","assets/insta-logo.png","assets/fb-logo.png","assets/linkedin-logo.png","assets/github-logo.png","Components/Navbar/index.js","Components/ExperienceSection/index.js","Components/Button/index.js","Components/Icons/index.js","Components/ContactSection/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","StyledNavbar","Navbar","color","Nav","className","to","spy","smooth","Link","React","Component","styled","div","ExperienceSection","StyledExperienceSection","this","props","title","maxWidth","src","amazonLogo","alt","minWidth","govLogo","section","Button","StyledButton","text","Icons","StyledIcons","href","target","rel","insta","fb","linkedin","github","Contact","StyledContact","App","Style","id","ContactSection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f32de23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/white-amazon-logo.8a0202e5.png\";","module.exports = __webpack_public_path__ + \"static/media/gov_of_canada.001c2e20.png\";","module.exports = __webpack_public_path__ + \"static/media/insta-logo.0536f038.png\";","module.exports = __webpack_public_path__ + \"static/media/fb-logo.aa5e419a.png\";","module.exports = __webpack_public_path__ + \"static/media/linkedin-logo.2f935b4f.png\";","module.exports = __webpack_public_path__ + \"static/media/github-logo.9d171470.png\";","import React from 'react';\nimport styled from 'styled-components';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { Link } from \"react-scroll\";\n\nclass NavBar extends React.Component {\n  render() {\n    return (\n      <StyledNavbar>\n        <Navbar color=\"light\">\n          <Nav className=\"row\">\n            <Link to=\"home\" spy={true} smooth={true}>\n              <Nav.Link className=\"navlink\">Home</Nav.Link>\n            </Link>\n            <Link to=\"experience\" spy={true} smooth={true}>\n              <Nav.Link className=\"navlink\">Experience</Nav.Link>\n            </Link>\n            <Link to=\"about-me\" spy={true} smooth={true}>\n              <Nav.Link className=\"navlink\">About Me</Nav.Link>\n            </Link>              \n            <Link to=\"contact\" spy={true} smooth={true}>\n              <Nav.Link className=\"navlink\">Contact</Nav.Link>\n            </Link>\n          </Nav>\n        </Navbar>\n      </StyledNavbar>\n    );\n  }\n}\n\nconst StyledNavbar = styled.div `\n  width: 100%;\n  border-bottom: 1pt solid #119DA4;\n  opacity: 1;\n  background-color: #29292E;\n  position: -webkit-sticky;\n  position: sticky;\n  top: 0px;\n\n  .link {\n    text-decoration: none;\n    color: white;\n  }\n\n  .row {\n    display: flex;\n    flex-direction: row;\n    float: left;\n  }\n\n  .navlink {\n    text-decoration: none;\n    color: white;\n    font-size: calc(8px + 1vw);\n    font-family: 'Merriweather Sans';\n    display: block;\n    padding: 15px 10px;\n    margin: 0 15px;\n\n    :hover {\n      color: #119DA4;\n      cursor: pointer;\n      transition: all .3s;\n    }\n  }\n\n`\n\nexport default NavBar;","import React from 'react';\nimport styled from 'styled-components';\nimport MediaQuery from 'react-responsive';\nimport amazonLogo from \"../../assets/white-amazon-logo.png\";\nimport govLogo from \"../../assets/gov_of_canada.png\";\n\nclass ExperienceSection extends React.Component {\n    render() {\n        return (\n          <StyledExperienceSection>\n              <div className=\"title text\">\n                {this.props.title}\n              </div>\n              <MediaQuery maxWidth={600}>\n                <img src={amazonLogo} className=\"logo\" alt=\"Amazon_logo\"/>\n              </MediaQuery>\n              <div className=\"job\">\n                <MediaQuery minWidth={600}>                 \n                  <img src={amazonLogo} className=\"logo\" alt=\"Amazon_logo\"/>\n                </MediaQuery>\n                <div className=\"desc text\">\n                  <div className=\"position text\">\n                    SDE Intern\n                    <div className=\"date text\">\n                      May 2019 - August 2019\n                    </div>\n                  </div>\n                  <div className=\"bullet text\">\n                    Built, tested, and deployed a self-service portal for clients to manage users.\n                  </div>\n                  <div className=\"bullet text\">\n                    Improved the speed of on-boarding corporate clients by 22%, while also reducing user management support contacts by 47%.\n                  </div>\n                  <div className=\"bullet text\">\n                    Designed a long-term, scalable architecture using many modern services.                  \n                  </div>\n                  <div className=\"bullet text\">\n                    Some of the services used include: AWS KMS, DynamoDB, SQS, SNS, etc.\n                  </div>\n                </div>\n              </div>\n\n              <MediaQuery maxWidth={600}>\n                <img src={govLogo} className=\"logo\" alt=\"Government_of_Canada\"/>\n              </MediaQuery>\n              <div className=\"job\">\n                <MediaQuery minWidth={600}>                 \n                  <img src={govLogo} className=\"logo\" alt=\"Government_of_Canada\"/>\n                </MediaQuery>\n                <div className=\"desc text\">\n                  <div className=\"position text\">\n                    Programmer Analyst\n                    <div className=\"date text\">\n                      May 2018 - August 2018\n                    </div>\n                  </div>\n                  <div className=\"bullet text\">\n                    Fixed ongoing client issues leading to a smoother experience in our Fall Release.\n                  </div>\n                  <div className=\"bullet text\">\n                    Created software to organize all current client requests which improved efficiency by 30%.\n                  </div>\n                  <div className=\"bullet text\">\n                    Refactored and redesigned older code.\n                  </div>\n                </div>\n              </div>\n          </StyledExperienceSection>\n        );\n    }\n}\n\nconst StyledExperienceSection = styled.section `\n  padding: 50px 50px 0 50px;\n  width: 100%;\n  box-sizing: border-box;\n  justify-content: center;\n\n  .date {\n    float: right;\n    font-size: calc(8px + 1vw);\n    margin: 0px 0px 10px 0px;\n  }\n\n  .position {\n    color: #119DA4;\n    font-size: calc(8px + 1vw);\n    margin: 0px 0px 10px 0px;\n  }\n\n  .bullet {\n    font-size: calc(6px + 1vw);\n    margin: 0px 0px 10px 0px;\n    width: 100%;\n  }\n\n  .job {\n    display: flex;\n    flex-direction: row;\n    margin: 0 0 50px 0;\n  }\n\n  .desc {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    font-size: 18px;\n    margin: 0px 0px 10px 0px;\n  }\n\n  .logo {\n    display: block;\n    width: calc(60px + 9vw);\n    height: calc(20px + 3vw);\n    padding: 0 calc(12px + 2vw) 0 0;\n    align-items: center;\n    margin: 0 auto;\n  }\n\n  @media screen and (max-width: 600px) {\n    .logo {\n      display: block;\n      width: calc(60px + 9vw);\n      height: calc(20px + 3vw);\n      padding: 0 0 calc(12px + 1vw) 0;\n      align-items: center;\n      margin: 0 auto;\n    }\n\n    .job {\n      margin: 0 0 25px 0;\n    }\n  }\n\n  .container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 10px;\n    width: 100%;\n    box-sizing: border-box;\n  }\n`\n\nexport default ExperienceSection;","import React from 'react';\nimport styled from 'styled-components';\n\nclass Button extends React.Component {\n    render() {\n        return (\n          <StyledButton>\n            {this.props.text}\n          </StyledButton>\n        );\n    }\n}\n\nconst StyledButton = styled.div `\n    font-size: calc(10px + 1vw);\n    font-family: 'Merriweather Sans';\n    border: 1px solid white;\n    padding: 0.35em 1.2em;\n    margin-top: 25px;\n    transition: all .3s;\n    border-radius: 4px;\n    width: fit-content;\n\n\n    :hover {\n      color: white;\n      background-color: #119DA4;\n      cursor: pointer;   \n    }  \n`\n\nexport default Button;","import React from 'react';\nimport styled from 'styled-components';\nimport insta from '../../assets/insta-logo.png';\nimport fb from '../../assets/fb-logo.png';\nimport linkedin from '../../assets/linkedin-logo.png';\nimport github from '../../assets/github-logo.png';\n\nclass Icons extends React.Component {\n  render() {\n    return (\n      <StyledIcons>\n        <div className=\"icon-cluster\">\n          <a href=\"https://www.instagram.com/nickkazan/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img src={insta} className=\"icon\" alt=\"insta_logo\"/>\n          </a>\n          <a href=\"https://www.facebook.com/nickkazan123\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img src={fb} className=\"icon\" alt=\"facebook_logo\"/>\n          </a>\n        </div>\n        <div className=\"icon-cluster\">\n          <a href=\"https://www.linkedin.com/in/nickkazan/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img src={linkedin} className=\"icon\" alt=\"linkedin_logo\"/>\n          </a>\n          <a href=\"https://github.com/nickkazan\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <img src={github} className=\"icon\" alt=\"github_logo\"/>\n          </a>\n        </div>\n\n      </StyledIcons>\n    )\n  }\n}\n\nconst StyledIcons = styled.div `\n  .icon-cluster {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .icon {\n    width: calc(50px + 4vw);\n    height: calc(50px + 4vw);\n    margin: 25px;\n  }\n`\n\nexport default Icons;","import React from 'react';\nimport styled from 'styled-components';\nimport Icons from '../Icons';\n\nclass Contact extends React.Component {\n  render() {\n    return (\n      <StyledContact>\n        <div className=\"title text\">\n          {this.props.title}\n        </div>\n        <div className=\"text caption\">\n          Feel free to reach out to me at: <a href=\"mailto:nicholas.kazan1@gmail.com\" className=\"highlighted-text linked\"> nicholas.kazan1@gmail.com </a>\n        </div>\n        <Icons/>\n      </StyledContact>\n    );\n  }\n}\n\nconst StyledContact = styled.section `\n  padding: 50px 50px 0 50px;\n  width: 100%;\n  box-sizing: border-box;\n  justify-content: center;\n\n  .caption {\n    align-items: center;\n    width: fit-content;\n    padding: 40px 0 40px 0;\n    text-decoration: none;\n  }\n\n`\n\nexport default Contact;","import React from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport { Link } from \"react-scroll\";\nimport NavBar from './Components/Navbar';\nimport ExperienceSection from './Components/ExperienceSection';\nimport Button from './Components/Button';\nimport ContactSection from './Components/ContactSection';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <Style className=\"app-header flex\">\n        <section id=\"home\" className=\"app-header flex\">\n          <div className=\"title main\">\n            Hi, I'm<span className=\"highlighted-text\"> Nick Kazan </span>\n          </div>\n          <div className=\"title main\">\n            and I'm a Software Engineer.\n          </div>\n          <Link to=\"experience\" spy={true} smooth={true}>\n            <Button text=\"see my experience\"/>\n          </Link>\n        </section>\n        <NavBar/>\n        <section id=\"experience\" className=\"section-header flex\">\n          <ExperienceSection title=\"Experience\"/>\n        </section>\n        <section id=\"contact\" className=\"section-header flex centered\">\n          <ContactSection title=\"Let's Get In Touch\"/>\n        </section>\n      </Style>\n    );\n  }  \n}\n\nconst Style = styled.div `\n  .centered {\n    justify-contents: center;\n    align-items: center;\n  }\n\n  .main {\n    padding: 0;\n  }\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}